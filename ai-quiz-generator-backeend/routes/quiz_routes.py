# routes/quiz_routes.py
from flask import Blueprint, request, jsonify
import io # To handle file streams
from services.pdf_service import extract_text_from_pdf # Import the PDF extraction function
from services.quiz_service import generate_quiz_from_text, get_quizzes_by_user, delete_quiz_by_id
from utils.auth_middleware import token_required # Import our authentication decorator
from config import Config # For allowed extensions etc.

quiz_bp = Blueprint('quiz', __name__)

@quiz_bp.route('/generate', methods=['POST'])
@token_required # This decorator makes sure only logged-in users can access this route
def generate_quiz(current_user): # The decorated function now receives 'current_user'
    """
    API endpoint to receive a PDF, extract text, and generate a quiz using an LLM.
    """
    if 'pdf' not in request.files:
        return jsonify({'error': 'No PDF file provided in the request.'}), 400

    pdf_file = request.files['pdf']
    if pdf_file.filename == '':
        return jsonify({'error': 'No file selected.'}), 400

    # Basic file type check
    if pdf_file and pdf_file.filename.endswith('.pdf'):
        try:
            # Read the PDF file into a BytesIO stream
            # This keeps the file in memory rather than saving it to disk,
            # which is generally safer for web requests.
            pdf_stream = io.BytesIO(pdf_file.read())

            # Extract text from the PDF
            text_content = extract_text_from_pdf(pdf_stream)

            if not text_content.strip():
                return jsonify({'error': 'Could not extract any meaningful text from the PDF. It might be scanned, image-only, or empty.'}), 400

            # Call the quiz generation service
            quiz_data = generate_quiz_from_text(text_content, str(current_user['_id']))

            return jsonify(quiz_data), 200 # OK
        except ValueError as e:
            # Catch specific errors from services (e.g., not enough text, invalid PDF)
            return jsonify({'error': str(e)}), 400 # Bad Request
        except Exception as e:
            # Catch any unexpected errors
            print(f"Server error during quiz generation: {e}")
            return jsonify({'error': 'An unexpected error occurred during quiz generation.'}), 500 # Internal Server Error
    else:
        return jsonify({'error': 'Invalid file format. Only PDF files are allowed.'}), 400

@quiz_bp.route('/user/quizzes', methods=['GET'])
@token_required
def get_user_quizzes(current_user):
    """
    API endpoint to fetch all quizzes generated by the current authenticated user.
    """
    try:
        quizzes = get_quizzes_by_user(str(current_user['_id']))
        return jsonify(quizzes), 200 # OK
    except Exception as e:
        print(f"Error fetching user quizzes: {e}")
        return jsonify({'error': 'An unexpected error occurred while fetching quizzes.'}), 500 # Internal Server Error

@quiz_bp.route('/<string:quiz_id>', methods=['DELETE'])
@token_required
def delete_quiz(current_user, quiz_id):
    """
    API endpoint to delete a specific quiz by its ID.
    Ensures the quiz belongs to the authenticated user.
    """
    try:
        delete_quiz_by_id(quiz_id, str(current_user['_id']))
        return jsonify({'message': 'Quiz deleted successfully!'}), 200 # OK
    except ValueError as e:
        # Catch errors if quiz not found or user unauthorized to delete it
        return jsonify({'error': str(e)}), 404 # Not Found or Forbidden
    except Exception as e:
        print(f"Error deleting quiz {quiz_id}: {e}")
        return jsonify({'error': 'An unexpected error occurred while deleting the quiz.'}), 500 # Internal Server Error